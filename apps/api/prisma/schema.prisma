// datasource & generator are assumed in root schema or here:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

model ArticleGroupMirror {
  id               String             @id @default(uuid())
  externalId       String             @unique
  name             String
  description      String?
  parentExternalId String?
  sortOrder        Int?

  articles         ArticleMirror[]

  media            GroupMediaLink[]
  categories       GroupCategoryLink[]

  @@index([externalId])
}

model ArticleMirror {
  id            String   @id @default(uuid())
  externalId    String   @unique
  articleGroupId String  // FK -> ArticleGroupMirror.id
  sku           String?
  ean           String?
  title         String
  description   String?
  uom           String?
  updatedAt     DateTime

  attributes    Json?

  articleGroup  ArticleGroupMirror @relation(fields: [articleGroupId], references: [id], onDelete: Cascade)

  media         ArticleMediaLink[]

  @@index([articleGroupId])
}

model DriveSyncState {
  id            String   @id @default(uuid())
  driveFileId   String   @unique
  driveFileName String
  driveChecksum String?  // MD5 from Drive metadata
  mediaAssetId  String?  @unique
  targetType    String   // 'article' | 'group'
  targetId      String   // externalId of article/group
  sortOrder     Int
  lastSyncedAt  DateTime @default(now())
  
  mediaAsset    MediaAsset? @relation(fields: [mediaAssetId], references: [id], onDelete: SetNull)
  
  @@index([driveFileId])
  @@index([targetType, targetId])
}

model MediaAsset {
  id         String   @id @default(uuid())
  key        String
  mime       String
  width      Int?
  height     Int?
  sizeBytes  Int?
  checksum   String?
  variants   Json?
  driveSync  DriveSyncState?

  // reverse: links
  groupLinks    GroupMediaLink[]
  articleLinks  ArticleMediaLink[]
  categoryLinks CategoryMediaLink[]
}

model GroupMediaLink {
  id       String  @id @default(uuid())
  groupId  String
  mediaId  String
  altText  String?
  sortOrder Int     @default(0)

  group   ArticleGroupMirror @relation(fields: [groupId], references: [id], onDelete: Cascade)
  media   MediaAsset         @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([mediaId])
  @@unique([groupId, sortOrder])
}

model ArticleMediaLink {
  id        String  @id @default(uuid())
  articleId String
  mediaId   String
  altText   String?
  sortOrder Int     @default(0)

  article ArticleMirror @relation(fields: [articleId], references: [id], onDelete: Cascade)
  media   MediaAsset    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([mediaId])
  @@unique([articleId, sortOrder])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  color       String
  description String?
  
  // JSON arrays for structured data
  properties              Json?  // Array of { name: string, description: string }
  applications            Json?  // Array of strings
  formatsSpecifications   Json?  // Array of strings
  keyFigures              Json?  // Array of { name: string, description: string }
  ordering                Json?  // Array of { name: string, description: string }
  orderingNotes           Json?  // Array of strings

  groups GroupCategoryLink[]
  media  CategoryMediaLink[]
}

model GroupCategoryLink {
  id         String  @id @default(uuid())
  groupId    String
  categoryId String

  group    ArticleGroupMirror @relation(fields: [groupId], references: [id], onDelete: Cascade)
  category Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([categoryId])
  @@unique([groupId, categoryId])
}

model CategoryMediaLink {
  id         String  @id @default(uuid())
  categoryId String
  mediaId    String
  altText    String?
  sortOrder  Int     @default(0)

  category Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  media    MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([mediaId])
  @@unique([categoryId, sortOrder])
}
